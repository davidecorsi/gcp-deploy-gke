#
# A simple GKE spring-boot docker image.
#
# Install with
#
# $ kubectl apply -f deploy.yaml
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-data-json
  namespace: java
  labels:
    app: spring-boot-data-json
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-boot-data-json
  template:
    metadata:
      labels:
        app: spring-boot-data-json
    spec:
      containers:
      - name: spring-boot-data-json
        image: eu.gcr.io/java/spring-boot-data-json:latest
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  labels:
    app: spring-boot-data-json
  name: spring-boot-data-json-service
  namespace: java
spec:
  externalTrafficPolicy: Cluster
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: spring-boot-data-json
  sessionAffinity: None
  type: LoadBalancer

